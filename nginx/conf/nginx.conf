events {
    worker_connections  1024;
}

http {
  upstream web {
    server web:3000;
  }

  upstream api {
    server api:8080;
  }

  upstream phpmyadmin {
    server phpmyadmin:80;
  }

  upstream dozzle {
    server dozzle:1212;
  }

  upstream jenkins {
    server jenkins:8080;
  }


  server {
      listen 80;
      listen [::]:80;

      server_name   taurusaplikasi.com www.taurusaplikasi.com;
      server_tokens off;

      add_header Access-Control-Allow-Origin "localhost";

      location /.well-known/acme-challenge/ {
          root /var/www/certbot;
      }

      location / {
          return 301 https://taurusaplikasi.com$request_uri;
      }

      # location /web/ {
      #   proxy_set_header X-Forwarded-For $remote_addr;
      #   proxy_set_header Host            $http_host;
      #   proxy_pass http://web:3000/;
      # }

      # location / {
      #   expires $expires;

      #    proxy_redirect                      off;
      #    proxy_set_header Host               $host;
      #    proxy_set_header X-Real-IP          $remote_addr;
      #    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      #    proxy_set_header X-Forwarded-Proto  $scheme;
      #    proxy_read_timeout          1m;
      #    proxy_connect_timeout       1m;
      #    proxy_pass                          http://web:3000/;
      # }

      # location /api/ {
      #   proxy_set_header X-Forwarded-For $remote_addr;
      #   proxy_set_header Host            $http_host;
      #   proxy_pass http://api:8080/;
      # }
  }

  server {
      listen 443 default_server ssl http2;
      listen [::]:443 ssl http2;

      server_name taurusaplikasi.com;

      # add_header Access-Control-Allow-Origin "*"
      # add_header Access-Control-Allow-Methods: "GET,POST,OPTIONS,DELETE,PUT"

      # set client body size to 200M #
      client_max_body_size 200m;

      proxy_read_timeout 3600;
      proxy_connect_timeout 3600;
      proxy_send_timeout 3600;

      ssl_certificate /etc/nginx/ssl/live/taurusaplikasi.com/fullchain.pem;
      ssl_certificate_key /etc/nginx/ssl/live/taurusaplikasi.com/privkey.pem;

      location /robots.txt {
        add_header  Content-Type  text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
      }

      location / {
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host            $http_host;
        proxy_pass http://web/;
      }

      location /api/ {
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host            $http_host;
        proxy_pass http://api/;
      }

      location ^~ /phpmyadmin/ {
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host            $http_host;
        absolute_redirect off;
        proxy_pass http://phpmyadmin/;
      }

      location /logs/ {
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host            $http_host;
        proxy_buffering             off;
        proxy_cache                 off;
        proxy_pass http://dozzle/logs/;
    }

    location /jenkins/ {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Port 443;
        proxy_set_header Proxy "";
        proxy_set_header Host            $http_host;
        proxy_pass http://jenkins/jenkins/;
      }

      location /download/ {

          access_by_lua_block {
              local http = require("resty.http")
              local cjson = require("cjson")

              local httpc = http.new()
              local res, err = httpc:request_uri("https://api.github.com/repos/reAlpha39/matel/releases", {
                  method = "GET",
                  headers = {
                      ["Accept"] = "application/vnd.github+json",
                      ["Authorization"] = "Bearer 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",
                      ["X-GitHub-Api-Version"] = "2022-11-28"
                  }
              })

              if not res then
                  ngx.log(ngx.ERR, "Failed to send request to GitHub API: ", err)
                  ngx.exit(500)
              end

              if res.status == 200 then
                  local data = cjson.decode(res.body)
                  local id = data[1].assets[1].id
                  ngx.log(ngx.INFO, "Asset ID: ", id)

                  local download_url = string.format("https://api.github.com/repos/reAlpha39/matel/releases/assets/%s", id)

                  -- Mengatur header permintaan
                  ngx.req.set_header("Accept", "application/octet-stream")
                  ngx.req.set_header("Authorization", "Bearer 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")
                  ngx.req.set_header("X-GitHub-Api-Version", "2022-11-28")

                  -- Mengatur URI permintaan
                  local args = ngx.req.get_uri_args()
                  args[1] = download_url
                  ngx.req.set_uri_args(args)
              else
                  ngx.log(ngx.ERR, "Failed to fetch asset from GitHub API: ", res.status)
                  ngx.exit(500)
              end
          }

          proxy_pass $scheme://$host$request_uri;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          proxy_set_header Content-Type application/vnd.android.package-archive;
          proxy_set_header Content-Disposition "attachment; filename=app-release.apk";
      }

  }
}